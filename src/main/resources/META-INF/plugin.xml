<idea-plugin>
    <id>FitLang</id>
    <name>FitLang</name>
    <vendor email="yanchangyou@qq.com" url="https://github.com/yanchangyou">yanchangyou</vendor>
    <idea-version since-build="201" until-build="233.*"/>
    <description><![CDATA[
    English: (后面有中文版)
    <br/>
    <br/>
<p>
Fit language is a low code programming language that is developer friendly and tool friendly.
Use AST+JSON to write code, and JSON is the only data type, making plug-in design convenient for extending node functionality.
</p>
<br/>
<p>
First demo, file name is hello.fit<br/>
<br/>
code:<br/>
<pre>
{
    "input": {
        "who": "world"
    },
    "flow": {
        "uni": "hello"
    }
}
</pre>
<br/>
<p>
The file 'hello. fit' ends with 'fit' and inherits the JSON language plugin that comes with IDEA, using JSON<br/>
<br/>
input: input parameter definition<br/>
<br/>
flow: Definition of processing flow<br/>
<br/>
uni Uniform Node Identifier(like URI), distinguishing different processing, internally corresponding to an implementation class<br/>
<br/>
In the editor, right-click and select 'Run FitLang' to execute. After the code is executed, it will be output<br/>
<br/>
{"message": "hello, world!"}<br/>
</p>
<br/>
<p>
There are currently three types of plugin implementations: object, map, and JSON. It is recommended to use JSON
</p>
<br/>
<p>
The nodes that have been implemented so far are as follows:<br/>
<br/>
util nodes<br/>
hello: hello world demo<br/>
echo: Return input parameters as is<br/>
add: supports JSON addition<br/>
convert: Transform node, supports JSON to JSON conversion, using conversion expressions<br/>
removeField: Remove the JSON field<br/>
removeEmptyField: Remove an empty field<br/>
print: Console printing<br/>
sleep: Process sleep node<br/>
<br/>
flow node (with child nodes)<br/>
sequence: Sequential execution node<br/>
pipe: pipeline execution node<br/>
foreach: traverse JSON array field nodes<br/>
loop: Loop execution node, looptTimes specifies the number of execution times<br/>
switch: Branch execution node, switchField specifies the branch field<br/>
<br/>
<br/>
中文：<br/>
<br/>
<p>
fit语言是一门低代码编程语言，开发人员友好和工具处理友好。<br/>
使用AST+JSON来编写代码，并且JSON是唯一的数据类型，插件式设计方便扩展节点功能。<br/>
</p>
<br/>
<p>
第一个demo：hello.fit<br/>
内容<br/>
<pre>
{
    "input": {
        "who": "world"
    },
    "flow": {
        "uni": "hello"
    }
}
</pre>
<br/>
<p>
hello.fit 后缀以fit结尾，语言插件继承IDEA自带的JSON语言，使用JSON的语法校验、高亮、格式等<br/>
input：入参定义<br/>
flow：处理流程定义<br/>
uni 统一节点描述符(借鉴URI)，区分不同的处理，内部对应一个实现类<br/>
编辑器里面，点击右键，选择【Run FitLang】执行，代码执行完将输出<br/>
{"message":"hello, world!"}<br/>
</p>
<br/>
<p>
目前有三类插件实现：object、map、json，推荐使用json<br/>
</p>
<br/>
<p>
目前已经实现的节点如下：<br/>
<br/>
实用节点<br/>
hello: hello world demo<br/>
echo: 原样返回入参<br/>
add：支持json相加<br/>
convert：转换节点，支持json到json的转换，使用转换表达式<br/>
removeField：移除json字段<br/>
removeEmptyField：移除空字段<br/>
print：控制台打印<br/>
sleep：流程休眠节点<br/>
<br/>
流程节点（有child子节点）<br/>
sequence：顺序执行节点<br/>
pipe：管道执行节点<br/>
foreach：遍历json数组字段节点<br/>
loop：循环执行节点，looptTimes制定执行次数<br/>
switch：分支执行节点，switchField指定分支字段<br/>
</p>
    ]]></description>

    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>
    <extensions defaultExtensionNs="com.intellij">
        <fileType language="fit" name="fit" patterns="*.fit"
                  implementationClass="my.lang.MyLanguageFileType" fieldName="INSTANCE" extensions="fit"/>
        <lang.parserDefinition language="fit" implementationClass="my.lang.parser.MyLanguageParserDefinition"/>
        <lang.syntaxHighlighterFactory language="fit"
                                       implementationClass="my.lang.highlight.MyLanguageSyntaxHighlighterFactory"/>
        <colorSettingsPage id="fit" implementation="my.lang.highlight.MyLanguageColorSettingsPage"/>
        <lang.psiStructureViewFactory language="fit"
                                      implementationClass="my.lang.structure.MyLanguageStructureViewFactory"/>
        <completion.contributor language="fit"
                                implementationClass="my.lang.completion.MyLanguageCompletionContributor"/>
        <lang.formatter language="fit" implementationClass="my.lang.format.MyLanguageFormattingModelBuilder"/>
        <!--        <codeStyleSettingsProvider implementation="my.lang.style.MyLanguageCodeStyleSettingsProvider"/>-->
        <langCodeStyleSettingsProvider implementation="my.lang.style.MyLanguageLanguageCodeStyleSettingsProvider"/>

        <toolWindow id="FitLang Console" anchor="bottom" order="first"
                    factoryClass="my.lang.action.ScriptConsoleWindowFactory"/>
        <lang.commenter language="fit" implementationClass="my.lang.comment.MyLanguageCommenter"/>
    </extensions>

    <actions>
        <!-- Add your actions here -->
        <action id="RunFitLang" class="my.lang.action.ScriptRunCodeAction" text="Run FitLang"
                description="Run fit lang"
                icon="/my/lang/icon/fit.svg">
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
            <keyboard-shortcut first-keystroke="control shift J" keymap="$default"/>
        </action>

    </actions>

    <change-notes>
        <![CDATA[
        FitLang update list:<br/>
        <ul>
            <li>0.2.6 add node: thread; server node support port input; loop support bags mode</li>
            <li>0.2.5 add web node; loop node support pipe mode</li>
            <li>0.2.4 bugfix</li>
            <li>0.2.3 add node: mix, replace, eval; support AviatorScript</li>
            <li>0.2.2 add node: proxy</li>
            <li>0.2.1 add node: return</li>
            <li>0.2.0 add node: http, server, fileServer</li>
            <li>0.1.1 add node: sequence, pipe, switch, foreach, loop, hello, echo, add, convert, sleep</li>
        </ul>
        <br/>
        ]]>
    </change-notes>
</idea-plugin>